// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.1.0.post0.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ['/usr/local/include', '/usr/local/slepc-32/includ
//                                  e', '/usr/local/petsc-32/include', '/usr/include/m
//                                  pich', '/usr/include/hdf5/mpich', '/usr/include/ei
//                                  gen3', '/usr/local/lib/python3.6/dist-packages/ffc
//                                  /backends/ufc']
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   False
//  format:                         'ufc'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  no-evaluate_basis_derivatives:  True
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              3
//  quadrature_rule:                None
//  representation:                 'uflacs'
//  split:                          False

#include "ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6.h"

// Based on https://gcc.gnu.org/wiki/Visibility
#if defined _WIN32 || defined __CYGWIN__
    #ifdef __GNUC__
        #define DLL_EXPORT __attribute__ ((dllexport))
    #else
        #define DLL_EXPORT __declspec(dllexport)
    #endif
#else
    #define DLL_EXPORT __attribute__ ((visibility ("default")))
#endif

ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_cell_integral_main_otherwise::ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_cell_integral_main_otherwise() : ufc::cell_integral()
{

}

ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_cell_integral_main_otherwise::~ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_cell_integral_main_otherwise()
{

}

const std::vector<bool> & ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_cell_integral_main_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true});
return enabled;
}

void ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_cell_integral_main_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 3
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 2
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           3
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights5[5] = { -0.1333333333333333, 0.075, 0.075, 0.075, 0.075 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE27_C0_D001_Q5[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE27_C0_Q5[1][5][4] =
        { { { 0.2500000000000001, 0.25, 0.25, 0.25 },
            { 0.1666666666666668, 0.5, 0.1666666666666667, 0.1666666666666666 },
            { 0.1666666666666668, 0.1666666666666666, 0.5, 0.1666666666666666 },
            { 0.1666666666666668, 0.1666666666666666, 0.1666666666666667, 0.5 },
            { 0.5, 0.1666666666666666, 0.1666666666666667, 0.1666666666666666 } } };
    alignas(32) static const double FE8_C0_D001_Q5[1][5][7] =
        { { { 0.0, 0.0, 1.0, 1.0, 0.0, -1.0, -1.0 },
            { 0.3333333333333341, -0.3333333333333373, 0.6666666666666681, 2.000000000000007, 0.0, -0.6666666666666669, -2.0 },
            { 0.333333333333334, -0.3333333333333375, 2.000000000000003, 0.6666666666666723, 0.0, -2.000000000000001, -0.666666666666666 },
            { 0.3333333333333339, 1.0, 0.6666666666666653, 0.6666666666666736, -1.333333333333334, -0.6666666666666664, -0.6666666666666671 },
            { -1.0, -0.3333333333333377, 0.6666666666666683, 0.6666666666666723, 1.333333333333334, -0.6666666666666672, -0.6666666666666669 } } };
    alignas(32) static const double FE8_C0_D010_Q5[1][5][7] =
        { { { 0.0, 0.0, 1.0, 1.0, -1.0, 0.0, -1.0 },
            { 0.333333333333335, -0.3333333333333356, 0.6666666666666675, 2.000000000000006, -0.6666666666666672, 0.0, -2.000000000000001 },
            { 0.3333333333333346, 1.0, 0.6666666666666675, 0.6666666666666732, -0.6666666666666672, -1.333333333333334, -0.6666666666666672 },
            { 0.3333333333333347, -0.3333333333333351, 2.000000000000002, 0.6666666666666701, -2.000000000000002, 0.0, -0.6666666666666667 },
            { -1.0, -0.3333333333333359, 0.6666666666666675, 0.6666666666666715, -0.6666666666666672, 1.333333333333333, -0.6666666666666672 } } };
    alignas(32) static const double FE8_C0_D100_Q5[1][5][7] =
        { { { 0.0, 0.0, 1.0, 1.0, -1.0, -1.0, 0.0 },
            { 0.3333333333333343, 1.0, 0.666666666666667, 0.6666666666666672, -0.666666666666667, -0.6666666666666675, -1.333333333333333 },
            { 0.3333333333333348, -0.3333333333333346, 0.6666666666666671, 2.000000000000001, -0.6666666666666671, -2.000000000000002, 0.0 },
            { 0.3333333333333347, -0.3333333333333345, 2.000000000000002, 0.666666666666667, -2.000000000000002, -0.6666666666666674, 0.0 },
            { -1.0, -0.333333333333334, 0.6666666666666672, 0.6666666666666672, -0.6666666666666672, -0.6666666666666675, 1.333333333333333 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE27_C0_D001_Q5[0][0][0] + coordinate_dofs[7] * FE27_C0_D001_Q5[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE27_C0_D001_Q5[0][0][0] + coordinate_dofs[11] * FE27_C0_D001_Q5[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE27_C0_D001_Q5[0][0][0] + coordinate_dofs[10] * FE27_C0_D001_Q5[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE27_C0_D001_Q5[0][0][0] + coordinate_dofs[8] * FE27_C0_D001_Q5[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE27_C0_D001_Q5[0][0][0] + coordinate_dofs[3] * FE27_C0_D001_Q5[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE27_C0_D001_Q5[0][0][0] + coordinate_dofs[6] * FE27_C0_D001_Q5[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE27_C0_D001_Q5[0][0][0] + coordinate_dofs[5] * FE27_C0_D001_Q5[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE27_C0_D001_Q5[0][0][0] + coordinate_dofs[4] * FE27_C0_D001_Q5[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE27_C0_D001_Q5[0][0][0] + coordinate_dofs[9] * FE27_C0_D001_Q5[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE27_C0_D001_Q5[0][0][0] + coordinate_dofs[3] * FE27_C0_D001_Q5[0][0][1];
    const double J_c4 = coordinate_dofs[1] * FE27_C0_D001_Q5[0][0][0] + coordinate_dofs[7] * FE27_C0_D001_Q5[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE27_C0_D001_Q5[0][0][0] + coordinate_dofs[11] * FE27_C0_D001_Q5[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE27_C0_D001_Q5[0][0][0] + coordinate_dofs[10] * FE27_C0_D001_Q5[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE27_C0_D001_Q5[0][0][0] + coordinate_dofs[8] * FE27_C0_D001_Q5[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE27_C0_D001_Q5[0][0][0] + coordinate_dofs[6] * FE27_C0_D001_Q5[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE27_C0_D001_Q5[0][0][0] + coordinate_dofs[5] * FE27_C0_D001_Q5[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE27_C0_D001_Q5[0][0][0] + coordinate_dofs[4] * FE27_C0_D001_Q5[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE27_C0_D001_Q5[0][0][0] + coordinate_dofs[9] * FE27_C0_D001_Q5[0][0][1];
    alignas(32) double sp[58];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = J_c2 * J_c7;
    sp[20] = J_c8 * (-1 * J_c1);
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] / sp[13];
    sp[23] = J_c0 * J_c8;
    sp[24] = J_c6 * (-1 * J_c2);
    sp[25] = sp[23] + sp[24];
    sp[26] = sp[25] / sp[13];
    sp[27] = J_c1 * J_c6;
    sp[28] = J_c0 * J_c7;
    sp[29] = sp[27] + -1 * sp[28];
    sp[30] = sp[29] / sp[13];
    sp[31] = J_c1 * J_c5;
    sp[32] = J_c2 * J_c4;
    sp[33] = sp[31] + -1 * sp[32];
    sp[34] = sp[33] / sp[13];
    sp[35] = J_c2 * J_c3;
    sp[36] = J_c0 * J_c5;
    sp[37] = sp[35] + -1 * sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = J_c0 * J_c4;
    sp[40] = J_c1 * J_c3;
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] / sp[13];
    sp[43] = J_c4 * J_c8;
    sp[44] = J_c5 * J_c7;
    sp[45] = sp[43] + -1 * sp[44];
    sp[46] = J_c0 * sp[45];
    sp[47] = J_c5 * J_c6;
    sp[48] = J_c3 * J_c8;
    sp[49] = sp[47] + -1 * sp[48];
    sp[50] = J_c1 * sp[49];
    sp[51] = sp[46] + sp[50];
    sp[52] = J_c3 * J_c7;
    sp[53] = J_c4 * J_c6;
    sp[54] = sp[52] + -1 * sp[53];
    sp[55] = J_c2 * sp[54];
    sp[56] = sp[51] + sp[55];
    sp[57] = std::abs(sp[56]);
    alignas(32) double BF0[4] = {};
    alignas(32) double BF1[4] = {};
    alignas(32) double BF2[4] = {};
    alignas(32) double BF3[4] = {};
    alignas(32) double BF4[4] = {};
    alignas(32) double BF5[4] = {};
    alignas(32) double BF6[4] = {};
    alignas(32) double BF7[4] = {};
    alignas(32) double BF8[4] = {};
    for (int iq = 0; iq < 5; ++iq)
    {
        // Quadrature loop body setup (num_points=5)
        // Unstructured varying computations for num_points=5
        const double w0_d0_c0 = w[0][0] * FE8_C0_D100_Q5[0][iq][0] + w[0][1] * FE8_C0_D100_Q5[0][iq][1] + w[0][5] * FE8_C0_D100_Q5[0][iq][2] + w[0][6] * FE8_C0_D100_Q5[0][iq][3] + w[0][7] * FE8_C0_D100_Q5[0][iq][4] + w[0][8] * FE8_C0_D100_Q5[0][iq][5] + w[0][9] * FE8_C0_D100_Q5[0][iq][6];
        const double w0_d1_c0 = w[0][0] * FE8_C0_D010_Q5[0][iq][0] + w[0][2] * FE8_C0_D010_Q5[0][iq][1] + w[0][4] * FE8_C0_D010_Q5[0][iq][2] + w[0][6] * FE8_C0_D010_Q5[0][iq][3] + w[0][7] * FE8_C0_D010_Q5[0][iq][4] + w[0][8] * FE8_C0_D010_Q5[0][iq][5] + w[0][9] * FE8_C0_D010_Q5[0][iq][6];
        const double w0_d2_c0 = w[0][0] * FE8_C0_D001_Q5[0][iq][0] + w[0][3] * FE8_C0_D001_Q5[0][iq][1] + w[0][4] * FE8_C0_D001_Q5[0][iq][2] + w[0][5] * FE8_C0_D001_Q5[0][iq][3] + w[0][7] * FE8_C0_D001_Q5[0][iq][4] + w[0][8] * FE8_C0_D001_Q5[0][iq][5] + w[0][9] * FE8_C0_D001_Q5[0][iq][6];
        const double w0_d0_c1 = w[0][10] * FE8_C0_D100_Q5[0][iq][0] + w[0][11] * FE8_C0_D100_Q5[0][iq][1] + w[0][15] * FE8_C0_D100_Q5[0][iq][2] + w[0][16] * FE8_C0_D100_Q5[0][iq][3] + w[0][17] * FE8_C0_D100_Q5[0][iq][4] + w[0][18] * FE8_C0_D100_Q5[0][iq][5] + w[0][19] * FE8_C0_D100_Q5[0][iq][6];
        const double w0_d1_c1 = w[0][10] * FE8_C0_D010_Q5[0][iq][0] + w[0][12] * FE8_C0_D010_Q5[0][iq][1] + w[0][14] * FE8_C0_D010_Q5[0][iq][2] + w[0][16] * FE8_C0_D010_Q5[0][iq][3] + w[0][17] * FE8_C0_D010_Q5[0][iq][4] + w[0][18] * FE8_C0_D010_Q5[0][iq][5] + w[0][19] * FE8_C0_D010_Q5[0][iq][6];
        const double w0_d2_c1 = w[0][10] * FE8_C0_D001_Q5[0][iq][0] + w[0][13] * FE8_C0_D001_Q5[0][iq][1] + w[0][14] * FE8_C0_D001_Q5[0][iq][2] + w[0][15] * FE8_C0_D001_Q5[0][iq][3] + w[0][17] * FE8_C0_D001_Q5[0][iq][4] + w[0][18] * FE8_C0_D001_Q5[0][iq][5] + w[0][19] * FE8_C0_D001_Q5[0][iq][6];
        const double w0_d0_c2 = w[0][20] * FE8_C0_D100_Q5[0][iq][0] + w[0][21] * FE8_C0_D100_Q5[0][iq][1] + w[0][25] * FE8_C0_D100_Q5[0][iq][2] + w[0][26] * FE8_C0_D100_Q5[0][iq][3] + w[0][27] * FE8_C0_D100_Q5[0][iq][4] + w[0][28] * FE8_C0_D100_Q5[0][iq][5] + w[0][29] * FE8_C0_D100_Q5[0][iq][6];
        const double w0_d1_c2 = w[0][20] * FE8_C0_D010_Q5[0][iq][0] + w[0][22] * FE8_C0_D010_Q5[0][iq][1] + w[0][24] * FE8_C0_D010_Q5[0][iq][2] + w[0][26] * FE8_C0_D010_Q5[0][iq][3] + w[0][27] * FE8_C0_D010_Q5[0][iq][4] + w[0][28] * FE8_C0_D010_Q5[0][iq][5] + w[0][29] * FE8_C0_D010_Q5[0][iq][6];
        const double w0_d2_c2 = w[0][20] * FE8_C0_D001_Q5[0][iq][0] + w[0][23] * FE8_C0_D001_Q5[0][iq][1] + w[0][24] * FE8_C0_D001_Q5[0][iq][2] + w[0][25] * FE8_C0_D001_Q5[0][iq][3] + w[0][27] * FE8_C0_D001_Q5[0][iq][4] + w[0][28] * FE8_C0_D001_Q5[0][iq][5] + w[0][29] * FE8_C0_D001_Q5[0][iq][6];
        alignas(32) double sv5[54];
        sv5[0] = w0_d0_c0 * sp[14];
        sv5[1] = w0_d1_c0 * sp[17];
        sv5[2] = sv5[0] + sv5[1];
        sv5[3] = w0_d2_c0 * sp[18];
        sv5[4] = sv5[2] + sv5[3];
        sv5[5] = w0_d0_c1 * sp[14];
        sv5[6] = w0_d1_c1 * sp[17];
        sv5[7] = sv5[5] + sv5[6];
        sv5[8] = w0_d2_c1 * sp[18];
        sv5[9] = sv5[7] + sv5[8];
        sv5[10] = w0_d0_c2 * sp[14];
        sv5[11] = w0_d1_c2 * sp[17];
        sv5[12] = sv5[10] + sv5[11];
        sv5[13] = w0_d2_c2 * sp[18];
        sv5[14] = sv5[12] + sv5[13];
        sv5[15] = w0_d0_c1 * sp[22];
        sv5[16] = w0_d1_c1 * sp[26];
        sv5[17] = sv5[15] + sv5[16];
        sv5[18] = w0_d2_c1 * sp[30];
        sv5[19] = sv5[17] + sv5[18];
        sv5[20] = w0_d0_c0 * sp[22];
        sv5[21] = w0_d1_c0 * sp[26];
        sv5[22] = sv5[20] + sv5[21];
        sv5[23] = w0_d2_c0 * sp[30];
        sv5[24] = sv5[22] + sv5[23];
        sv5[25] = w0_d0_c2 * sp[22];
        sv5[26] = w0_d1_c2 * sp[26];
        sv5[27] = sv5[25] + sv5[26];
        sv5[28] = w0_d2_c2 * sp[30];
        sv5[29] = sv5[27] + sv5[28];
        sv5[30] = w0_d0_c0 * sp[34];
        sv5[31] = w0_d1_c0 * sp[38];
        sv5[32] = sv5[30] + sv5[31];
        sv5[33] = w0_d2_c0 * sp[42];
        sv5[34] = sv5[32] + sv5[33];
        sv5[35] = w0_d0_c1 * sp[34];
        sv5[36] = w0_d1_c1 * sp[38];
        sv5[37] = sv5[35] + sv5[36];
        sv5[38] = w0_d2_c1 * sp[42];
        sv5[39] = sv5[37] + sv5[38];
        sv5[40] = w0_d0_c2 * sp[34];
        sv5[41] = w0_d1_c2 * sp[38];
        sv5[42] = sv5[40] + sv5[41];
        sv5[43] = w0_d2_c2 * sp[42];
        sv5[44] = sv5[42] + sv5[43];
        sv5[45] = (1 + sv5[4]) * sp[57];
        sv5[46] = sv5[9] * sp[57];
        sv5[47] = sv5[14] * sp[57];
        sv5[48] = (1 + sv5[19]) * sp[57];
        sv5[49] = sv5[24] * sp[57];
        sv5[50] = sv5[29] * sp[57];
        sv5[51] = sv5[34] * sp[57];
        sv5[52] = sv5[39] * sp[57];
        sv5[53] = (1 + sv5[44]) * sp[57];
        const double fw0 = sv5[45] * weights5[iq];
        for (int i = 0; i < 4; ++i)
            BF0[i] += fw0 * FE27_C0_Q5[0][iq][i];
        const double fw1 = sv5[49] * weights5[iq];
        for (int i = 0; i < 4; ++i)
            BF1[i] += fw1 * FE27_C0_Q5[0][iq][i];
        const double fw2 = sv5[51] * weights5[iq];
        for (int i = 0; i < 4; ++i)
            BF2[i] += fw2 * FE27_C0_Q5[0][iq][i];
        const double fw3 = sv5[46] * weights5[iq];
        for (int i = 0; i < 4; ++i)
            BF3[i] += fw3 * FE27_C0_Q5[0][iq][i];
        const double fw4 = sv5[48] * weights5[iq];
        for (int i = 0; i < 4; ++i)
            BF4[i] += fw4 * FE27_C0_Q5[0][iq][i];
        const double fw5 = sv5[52] * weights5[iq];
        for (int i = 0; i < 4; ++i)
            BF5[i] += fw5 * FE27_C0_Q5[0][iq][i];
        const double fw6 = sv5[47] * weights5[iq];
        for (int i = 0; i < 4; ++i)
            BF6[i] += fw6 * FE27_C0_Q5[0][iq][i];
        const double fw7 = sv5[50] * weights5[iq];
        for (int i = 0; i < 4; ++i)
            BF7[i] += fw7 * FE27_C0_Q5[0][iq][i];
        const double fw8 = sv5[53] * weights5[iq];
        for (int i = 0; i < 4; ++i)
            BF8[i] += fw8 * FE27_C0_Q5[0][iq][i];
    }
    std::fill(A, A + 36, 0.0);
    for (int i = 0; i < 4; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 4; ++i)
        A[i + 4] += BF1[i];
    for (int i = 0; i < 4; ++i)
        A[i + 8] += BF2[i];
    for (int i = 0; i < 4; ++i)
        A[i + 12] += BF3[i];
    for (int i = 0; i < 4; ++i)
        A[i + 16] += BF4[i];
    for (int i = 0; i < 4; ++i)
        A[i + 20] += BF5[i];
    for (int i = 0; i < 4; ++i)
        A[i + 24] += BF6[i];
    for (int i = 0; i < 4; ++i)
        A[i + 28] += BF7[i];
    for (int i = 0; i < 4; ++i)
        A[i + 32] += BF8[i];
}

extern "C" DLL_EXPORT ufc::cell_integral * create_ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_cell_integral_main_otherwise()
{
  return new ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_cell_integral_main_otherwise();
}


ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main() : ufc::form()
{
    // Do nothing
}

ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::~ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main()
{
    // Do nothing
}

const char * ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::signature() const
{
    return "550328e6fd9437276cd578d30f5d33f14d04efde7218120c6c80c618232ecd4a923f1ecc434a75acb9c2e6921c2c0436f238b425b18e9ab7868897f9a7246c49";
}

std::size_t ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::rank() const
{
    return 1;
}

std::size_t ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::num_coefficients() const
{
    return 1;
}

std::size_t ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::original_coefficient_position(std::size_t i) const
{
    if (i >= 1)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0};
    return position[i];
}

ufc::finite_element * ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::create_coordinate_finite_element() const
{
    return create_ffc_element_16af6b649fadf61cfbbc905ea52262bc71249c2b_finite_element_main();
}

ufc::dofmap * ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::create_coordinate_dofmap() const
{
    return create_ffc_element_16af6b649fadf61cfbbc905ea52262bc71249c2b_dofmap_main();
}

ufc::coordinate_mapping * ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::create_coordinate_mapping() const
{
    return create_ffc_coordinate_mapping_bbe5001d60345544f4153023a4a8d8259bf5e4fa_coordinate_mapping_main();
}

ufc::finite_element * ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return create_ffc_element_c6d1f8363bada3fbb8b2fdbd5d434c66ca66441f_finite_element_main();
    case 1:
        return create_ffc_element_a0486fd8c8124acd09b2ea68e480deaef4ac7177_finite_element_main();
    default:
        return nullptr;
    }
}

ufc::dofmap * ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return create_ffc_element_c6d1f8363bada3fbb8b2fdbd5d434c66ca66441f_dofmap_main();
    case 1:
        return create_ffc_element_a0486fd8c8124acd09b2ea68e480deaef4ac7177_dofmap_main();
    default:
        return nullptr;
    }
}

std::size_t ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::max_overlap_subdomain_id() const
{
    return 0;
}

bool ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::has_cell_integrals() const
{
    return true;
}

bool ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::has_exterior_facet_integrals() const
{
    return false;
}

bool ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::has_interior_facet_integrals() const
{
    return false;
}

bool ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::has_vertex_integrals() const
{
    return false;
}

bool ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::has_custom_integrals() const
{
    return false;
}

bool ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::has_cutcell_integrals() const
{
    return false;
}

bool ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::has_interface_integrals() const
{
    return false;
}

bool ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interior_facet_integral * ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::create_default_cell_integral() const
{
    return create_ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_cell_integral_main_otherwise();
}

ufc::exterior_facet_integral * ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main::create_default_overlap_integral() const
{
    return nullptr;
}

extern "C" DLL_EXPORT ufc::form * create_ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main()
{
  return new ffc_form_74d937094ade8f29f005e97b083181d387b7a9f6_form_main();
}

